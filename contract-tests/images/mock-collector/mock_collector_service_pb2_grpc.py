# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mock_collector_service_pb2 as mock__collector__service__pb2


class MockCollectorServiceStub(object):
    """Service definition for mock collector
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.clear = channel.unary_unary(
                '/MockCollectorService/clear',
                request_serializer=mock__collector__service__pb2.ClearRequest.SerializeToString,
                response_deserializer=mock__collector__service__pb2.ClearResponse.FromString,
                )
        self.get_traces = channel.unary_unary(
                '/MockCollectorService/get_traces',
                request_serializer=mock__collector__service__pb2.GetTracesRequest.SerializeToString,
                response_deserializer=mock__collector__service__pb2.GetTracesResponse.FromString,
                )
        self.get_metrics = channel.unary_unary(
                '/MockCollectorService/get_metrics',
                request_serializer=mock__collector__service__pb2.GetMetricsRequest.SerializeToString,
                response_deserializer=mock__collector__service__pb2.GetMetricsResponse.FromString,
                )


class MockCollectorServiceServicer(object):
    """Service definition for mock collector
    """

    def clear(self, request, context):
        """Clears all traces and metrics captured by  mock collector, so it can be used for multiple tests.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_traces(self, request, context):
        """Returns traces exported to mock collector
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def get_metrics(self, request, context):
        """Returns metrics exported to mock collector
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MockCollectorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'clear': grpc.unary_unary_rpc_method_handler(
                    servicer.clear,
                    request_deserializer=mock__collector__service__pb2.ClearRequest.FromString,
                    response_serializer=mock__collector__service__pb2.ClearResponse.SerializeToString,
            ),
            'get_traces': grpc.unary_unary_rpc_method_handler(
                    servicer.get_traces,
                    request_deserializer=mock__collector__service__pb2.GetTracesRequest.FromString,
                    response_serializer=mock__collector__service__pb2.GetTracesResponse.SerializeToString,
            ),
            'get_metrics': grpc.unary_unary_rpc_method_handler(
                    servicer.get_metrics,
                    request_deserializer=mock__collector__service__pb2.GetMetricsRequest.FromString,
                    response_serializer=mock__collector__service__pb2.GetMetricsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'MockCollectorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MockCollectorService(object):
    """Service definition for mock collector
    """

    @staticmethod
    def clear(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MockCollectorService/clear',
            mock__collector__service__pb2.ClearRequest.SerializeToString,
            mock__collector__service__pb2.ClearResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_traces(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MockCollectorService/get_traces',
            mock__collector__service__pb2.GetTracesRequest.SerializeToString,
            mock__collector__service__pb2.GetTracesResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def get_metrics(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/MockCollectorService/get_metrics',
            mock__collector__service__pb2.GetMetricsRequest.SerializeToString,
            mock__collector__service__pb2.GetMetricsResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
