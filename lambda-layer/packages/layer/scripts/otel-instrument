#!/bin/bash
_is_esm_handler() {
  # Lambda function root directory
  TASK_DIR="/var/task"

  # Flag variables to track conditions
  local found_mjs=false
  local is_module=false

  # Check for any files ending with `.mjs`
  if ls "$TASK_DIR"/*.mjs &>/dev/null; then
      found_mjs=true
    fi

  # Check if `package.json` exists and if it contains `"type": "module"`
  if [ -f "$TASK_DIR/package.json" ]; then
    # Check for the `"type": "module"` attribute in `package.json`
    if grep -q '"type": *"module"' "$TASK_DIR/package.json"; then
      is_module=true
    fi
  fi

  # Return true if both conditions are met
  if $found_mjs || $is_module; then
    return 0  # 0 in bash means true
  else
    return 1  # 1 in bash means false
  fi
}

if _is_esm_handler || [[ ${HANDLER_IS_ESM} == true ]]; then
  export NODE_OPTIONS="${NODE_OPTIONS} --import @aws/aws-distro-opentelemetry-node-autoinstrumentation/register --experimental-loader=@opentelemetry/instrumentation/hook.mjs"
  export HANDLER_IS_ESM=true
else
  export NODE_OPTIONS="${NODE_OPTIONS} --require /opt/wrapper.js"
fi

export LAMBDA_RESOURCE_ATTRIBUTES="cloud.region=$AWS_REGION,cloud.provider=aws,faas.name=$AWS_LAMBDA_FUNCTION_NAME,faas.version=$AWS_LAMBDA_FUNCTION_VERSION,faas.instance=$AWS_LAMBDA_LOG_STREAM_NAME,aws.log.group.names=$AWS_LAMBDA_LOG_GROUP_NAME";


# - If OTEL_EXPORTER_OTLP_PROTOCOL is not set by user, the default exporting protocol is http/protobuf.
if [ -z "${OTEL_EXPORTER_OTLP_PROTOCOL}" ]; then
    export OTEL_EXPORTER_OTLP_PROTOCOL=http/protobuf
fi

# If both OTEL_NODE_ENABLED_INSTRUMENTATIONS and OTEL_NODE_DISABLED_INSTRUMENTATIONS are not configured,
# set OTEL_NODE_ENABLED_INSTRUMENTATIONS="aws-sdk,aws-lambda"
if [ -z "${OTEL_NODE_ENABLED_INSTRUMENTATIONS}" ] && [ -z "${OTEL_NODE_DISABLED_INSTRUMENTATIONS}" ]; then
    export OTEL_NODE_ENABLED_INSTRUMENTATIONS="aws-sdk,aws-lambda"

# Else if OTEL_NODE_ENABLED_INSTRUMENTATIONS is configured and OTEL_NODE_DISABLED_INSTRUMENTATIONS is not,
# append OTEL_NODE_ENABLED_INSTRUMENTATIONS with "aws-lambda"
elif [ -n "${OTEL_NODE_ENABLED_INSTRUMENTATIONS}" ] && [ -z "${OTEL_NODE_DISABLED_INSTRUMENTATIONS}" ]; then
    export OTEL_NODE_ENABLED_INSTRUMENTATIONS="${OTEL_NODE_ENABLED_INSTRUMENTATIONS},aws-lambda"

# Else if both OTEL_NODE_ENABLED_INSTRUMENTATIONS and OTEL_NODE_DISABLED_INSTRUMENTATIONS are configured,
# append OTEL_NODE_ENABLED_INSTRUMENTATIONS with "aws-lambda"
elif [ -n "${OTEL_NODE_ENABLED_INSTRUMENTATIONS}" ] && [ -n "${OTEL_NODE_DISABLED_INSTRUMENTATIONS}" ]; then
    export OTEL_NODE_ENABLED_INSTRUMENTATIONS="${OTEL_NODE_ENABLED_INSTRUMENTATIONS},aws-lambda"

# Else do nothing
fi

# - Set the service name
if [ -z "${OTEL_SERVICE_NAME}" ]; then
    export OTEL_SERVICE_NAME=$AWS_LAMBDA_FUNCTION_NAME;
fi

# - Set the propagators
if [[ -z "$OTEL_PROPAGATORS" ]]; then
  export OTEL_PROPAGATORS="tracecontext,baggage,xray"
fi

# - Set Application Signals configuration
if [ -z "${OTEL_AWS_APPLICATION_SIGNALS_ENABLED}" ]; then
    export OTEL_AWS_APPLICATION_SIGNALS_ENABLED="true";
fi

if [ -z "${OTEL_METRICS_EXPORTER}" ]; then
    export OTEL_METRICS_EXPORTER="none";
fi

# - Append Lambda Resource Attributes to OTel Resource Attribute List
if [ -z "${OTEL_RESOURCE_ATTRIBUTES}" ]; then
    export OTEL_RESOURCE_ATTRIBUTES=$LAMBDA_RESOURCE_ATTRIBUTES;
else
    export OTEL_RESOURCE_ATTRIBUTES="$LAMBDA_RESOURCE_ATTRIBUTES,$OTEL_RESOURCE_ATTRIBUTES";
fi

if [[ $OTEL_RESOURCE_ATTRIBUTES != *"service.name="* ]]; then
  export OTEL_RESOURCE_ATTRIBUTES="service.name=${AWS_LAMBDA_FUNCTION_NAME},${OTEL_RESOURCE_ATTRIBUTES}"
fi

exec "$@"
